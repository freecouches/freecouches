//Anything where we're waiting should have some kinda drip reminder to continya.
    // Reference reminders in a drip.  See how Couchers does it here:  https://github.com/Couchers-org/couchers/blob/develop/app/backend/src/couchers/jobs/handlers.py#L319
// signing up for us should also trigger contact info entry in sendgrid, like if it was a mailing list subscription.  make sure to include that in diagram.
// actual application: ensure they read the principles.
// QSTN: when would we stop using Streak for the Guest Waitlist?  I think we only use it as a makeshift db until we have a prod db?  But Host Waitlist it continues to be a useful application processing mechanism for picking your top 100 hosts as you launch a city.  And then it continues to collect a waitlist of ppl..


// NOTE: The Guest and Host Dashboards will show to the user where they are in their onboarding.
// every step of the booking process with the state machine changing also corresponds to email notifs (This is both a guest and host thing so won't repeat it there)
// NOTE: Notifs are the unifying concept in the flow (covers both emails) and sms)  just have a certain colored box for notifs

// [MVP decision] it seems logical that rather than using a form, they have a dashboard.  the web could completely represent this state machine, but emails would accompany it

digraph unix {
    compound=true; 
    rankdir="TB"
    labelloc="t";
    newrank=true;

    label = <<FONT POINT-SIZE="18">App V1 Implementation</FONT>>    



    subgraph cluster_golden_guest {
            label="Product - Guest";
            p0 [label="Home Page (P0)"] 
            signup [label="Signup/Apply"]
            p1 [label="Logged in\nHome Page (P1)"]
            p2 [label="Search/Filter (P2)"]
            p3 [label="Listing Page (P3)"]
            p4 [label="Booking Request (P4)"]
            actual_stay [label="Actual Stay"]
            p5 [label="Review (P5)"]

            p0 -> signup -> p1 -> p2 -> p3 -> p4 -> actual_stay -> p5
    }
}